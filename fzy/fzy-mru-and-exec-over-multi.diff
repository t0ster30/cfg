--- src/choices.c	2021-07-30 02:19:58.574493751 +0300
+++ src/choices.c.patched	2021-07-30 02:35:22.645033520 +0300
@@ -18,7 +18,7 @@
 /* Initial size of multi-selection buffer */
 #define INITIAL_SELECTIONS_CAPACITY 8
 
-static int cmpchoice(const void *_idx1, const void *_idx2) {
+static int cmpchoice_score(const void *_idx1, const void *_idx2) {
 	const struct scored_result *a = _idx1;
 	const struct scored_result *b = _idx2;
 
@@ -39,6 +39,19 @@
 	}
 }
 
+static int cmpchoice_order(const void *_idx1, const void *_idx2) {
+	const struct scored_result *a = _idx1;
+	const struct scored_result *b = _idx2;
+
+	if (a->order == b->order) {
+		return 0;
+	} else if (a->order < b->order) {
+		return 1;
+	} else {
+		return -1;
+	}
+}
+
 static void *safe_realloc(void *buffer, size_t size) {
 	buffer = realloc(buffer, size);
 	if (!buffer) {
@@ -118,6 +131,12 @@
 	c->capacity = c->size = 0;
 	choices_resize(c, INITIAL_CHOICE_CAPACITY);
 
+	if (!strcmp(options->sorting_method, "score")) {
+		c->cmpchoice = cmpchoice_score;
+	} else {
+		c->cmpchoice = cmpchoice_order;
+	}
+
 	if (options->workers) {
 		c->worker_count = options->workers;
 	} else {
@@ -234,7 +253,7 @@
 	pthread_mutex_unlock(&job->lock);
 }
 
-static struct result_list merge2(struct result_list list1, struct result_list list2) {
+static struct result_list merge2(struct result_list list1, struct result_list list2, const choices_t *c) {
 	size_t result_index = 0, index1 = 0, index2 = 0;
 
 	struct result_list result;
@@ -246,7 +265,7 @@
 	}
 
 	while(index1 < list1.size && index2 < list2.size) {
-		if (cmpchoice(&list1.list[index1], &list2.list[index2]) < 0) {
+		if (c->cmpchoice(&list1.list[index1], &list2.list[index2]) < 0) {
 			result.list[result_index++] = list1.list[index1++];
 		} else {
 			result.list[result_index++] = list2.list[index2++];
@@ -285,13 +304,14 @@
 			if (has_match(job->search, c->strings[i])) {
 				result->list[result->size].str = c->strings[i];
 				result->list[result->size].score = match(job->search, c->strings[i]);
+				result->list[result->size].order = i;
 				result->size++;
 			}
 		}
 	}
 
 	/* Sort the partial result */
-	qsort(result->list, result->size, sizeof(struct scored_result), cmpchoice);
+	qsort(result->list, result->size, sizeof(struct scored_result), c->cmpchoice);
 
 	/* Fan-in, merging results */
 	for(unsigned int step = 0;; step++) {
@@ -307,7 +327,7 @@
 			exit(EXIT_FAILURE);
 		}
 
-		w->result = merge2(w->result, job->workers[next_worker].result);
+		w->result = merge2(w->result, job->workers[next_worker].result, c);
 	}
 
 	return NULL;
--- src/choices.h	2021-07-30 02:19:58.574493751 +0300
+++ src/choices.h.patched	2021-07-30 02:38:21.153475195 +0300
@@ -10,6 +10,7 @@
 struct scored_result {
 	score_t score;
 	const char *str;
+	size_t order;
 };
 
 typedef struct {
@@ -33,6 +34,8 @@
 	} selections;
 
 	unsigned int worker_count;
+
+	int (*cmpchoice)(const void *, const void *);
 } choices_t;
 
 void choices_init(choices_t *c, options_t *options);
--- src/config.def.h	2021-07-30 01:56:15.585591717 +0300
+++ src/config.def.h.patched	2021-07-30 02:40:00.179944178 +0300
@@ -17,3 +17,4 @@
 #define DEFAULT_NUM_LINES 10
 #define DEFAULT_WORKERS 0
 #define DEFAULT_SHOW_INFO 0
+#define DEFAULT_SORTING_METHOD "score"
--- src/options.c	2021-07-30 01:56:15.585591717 +0300
+++ src/options.c.patched	2021-07-30 02:44:02.389993736 +0300
@@ -20,6 +20,7 @@
     " -0, --read-null          Read input delimited by ASCII NUL characters\n"
     " -j, --workers NUM        Use NUM workers for searching. (default is # of CPUs)\n"
     " -i, --show-info          Show selection info line\n"
+    " -m, --sorting-method=METHOD Sorting method of the matches (default score)\n"
     " -h, --help     Display this help and exit\n"
     " -v, --version  Output version information and exit\n";
 
@@ -38,6 +39,7 @@
 				   {"benchmark", optional_argument, NULL, 'b'},
 				   {"workers", required_argument, NULL, 'j'},
 				   {"show-info", no_argument, NULL, 'i'},
+				   {"sorting-method", required_argument, NULL, 'm'},
 				   {"help", no_argument, NULL, 'h'},
 				   {NULL, 0, NULL, 0}};
 
@@ -54,13 +56,14 @@
 	options->workers         = DEFAULT_WORKERS;
 	options->input_delimiter = '\n';
 	options->show_info       = DEFAULT_SHOW_INFO;
+	options->sorting_method  = DEFAULT_SORTING_METHOD;
 }
 
 void options_parse(options_t *options, int argc, char *argv[]) {
 	options_init(options);
 
 	int c;
-	while ((c = getopt_long(argc, argv, "vhs0e:q:l:t:p:j:i", longopts, NULL)) != -1) {
+	while ((c = getopt_long(argc, argv, "vhs0e:q:l:t:p:j:m:i", longopts, NULL)) != -1) {
 		switch (c) {
 			case 'v':
 				printf("%s " VERSION " © 2014-2018 John Hawthorn\n", argv[0]);
@@ -111,6 +114,15 @@
 				}
 				options->num_lines = l;
 			} break;
+			case 'm':
+				if (strcmp(optarg, "score") && strcmp(optarg, "order")) {
+					fprintf(stderr, "Invalid format for --sorting-method: %s\n", optarg);
+					fprintf(stderr, "Must be either 'score' or 'order'\n");
+					usage(argv[0]);
+					exit(EXIT_FAILURE);
+				}
+				options->sorting_method = optarg;
+				break;
 			case 'i':
 				options->show_info = 1;
 				break;
--- src/options.h	2021-07-30 01:56:15.585591717 +0300
+++ src/options.h.patched	2021-07-30 02:44:46.767103398 +0300
@@ -13,6 +13,7 @@
 	unsigned int workers;
 	char input_delimiter;
 	int show_info;
+	const char *sorting_method;
 } options_t;
 
 void options_init(options_t *options);
--- fzy.1	2021-08-01 14:37:53.447407456 +0300
+++ fzy.1.patched	2021-08-01 14:37:19.190750981 +0300
@@ -45,6 +45,9 @@
 Read input delimited by ASCII NUL characters.
 .
 .TP
+.BR \-m ", " \-\-sorting-method=\fIMETHOD\fR 
+Changes sorting method of the matches between score and order (default is score).
+.TP
 .BR \-h ", " \-\-help
 Usage help.
 .
@@ -58,7 +61,7 @@
 .BR "ENTER"
 Print the selected item (or all multi-selected items) to stdout and exit
 .TP
-.BR "Ctrl+c, Ctrl+g, Esc"
+.BR "Ctrl+c, Ctrl+d, Ctrl+g, Esc"
 Exit with status 1, without making a selection.
 .TP
 .BR "Up Arrow, Ctrl+p"
--- fzy.1	2021-08-01 14:40:43.459187900 +0300
+++ fzy.1.patched	2021-08-01 14:43:05.126768040 +0300
@@ -64,10 +64,10 @@
 .BR "Ctrl+c, Ctrl+d, Ctrl+g, Esc"
 Exit with status 1, without making a selection.
 .TP
-.BR "Up Arrow, Ctrl+p"
+.BR "Up Arrow, Ctrl+p, Ctrl+k"
 Select the previous item
 .TP
-.BR "Down Arrow, Ctrl+n"
+.BR "Down Arrow, Ctrl+n, Ctrl+j"
 Select the next item
 .TP
 .BR Tab
--- fzy.1	2021-08-01 14:43:05.126768040 +0300
+++ fzy.1.patched	2021-08-01 14:46:46.728763365 +0300
@@ -106,5 +106,8 @@
 .TP
 .BR "git checkout $(git branch | cut -c 3- | fzy)"
 Same as above, but switching git branches.
+.TP
+.BR "find . | fzy -x less
+Select files and open them for reading.
 .SH AUTHOR
 John Hawthorn <john.hawthorn@gmail.com>
--- fzy.1	2021-08-01 14:49:35.885503052 +0300
+++ fzy.1.patched	2021-08-01 14:53:03.110027473 +0300
@@ -48,6 +48,9 @@
 .BR \-m ", " \-\-sorting-method=\fIMETHOD\fR 
 Changes sorting method of the matches between score and order (default is score).
 .TP
+.BR \-x ", " \-\-exec=\fIPROG\fR
+Execute program on selection without exiting fully."
+.TP
 .BR \-h ", " \-\-help
 Usage help.
 .
@@ -106,5 +109,8 @@
 .TP
 .BR "git checkout $(git branch | cut -c 3- | fzy)"
 Same as above, but switching git branches.
+.TP
+.BR "find . | fzy -x less
+Select files and open them for reading.
 .SH AUTHOR
 John Hawthorn <john.hawthorn@gmail.com>
--- src/options.c	2021-08-01 14:40:43.459187900 +0300
+++ src/options.c.patched	2021-08-01 14:56:11.506439647 +0300
@@ -21,6 +21,7 @@
     " -j, --workers NUM        Use NUM workers for searching. (default is # of CPUs)\n"
     " -i, --show-info          Show selection info line\n"
     " -m, --sorting-method=METHOD Sorting method of the matches (default score)\n"
+    " -x, --exec=PROG          Execute prog on selection. Don't exit.\n"
     " -h, --help     Display this help and exit\n"
     " -v, --version  Output version information and exit\n";
 
@@ -30,6 +31,7 @@
 
 static struct option longopts[] = {{"show-matches", required_argument, NULL, 'e'},
 				   {"query", required_argument, NULL, 'q'},
+				   {"exec", required_argument, NULL, 'x'},
 				   {"lines", required_argument, NULL, 'l'},
 				   {"tty", required_argument, NULL, 't'},
 				   {"prompt", required_argument, NULL, 'p'},
@@ -47,6 +49,7 @@
 	/* set defaults */
 	options->benchmark       = 0;
 	options->filter          = NULL;
+	options->exec            = NULL;
 	options->init_search     = NULL;
 	options->show_scores     = 0;
 	options->scrolloff       = 1;
@@ -63,7 +66,7 @@
 	options_init(options);
 
 	int c;
-	while ((c = getopt_long(argc, argv, "vhs0e:q:l:t:p:j:m:i", longopts, NULL)) != -1) {
+	while ((c = getopt_long(argc, argv, "vhs0e:q:l:t:p:j:m:i:x", longopts, NULL)) != -1) {
 		switch (c) {
 			case 'v':
 				printf("%s " VERSION " © 2014-2018 John Hawthorn\n", argv[0]);
@@ -77,6 +80,12 @@
 			case 'q':
 				options->init_search = optarg;
 				break;
+			case 'x':
+				options->exec = malloc(MAXEXECLEN);
+				options->p_exec = stpcpy(options->exec,optarg);
+				*options->p_exec = ' ';
+				options->p_exec++;
+				break;
 			case 'e':
 				options->filter = optarg;
 				break;
--- src/options.h	2021-08-01 14:40:43.459187900 +0300
+++ src/options.h.patched	2021-08-01 14:58:36.382012896 +0300
@@ -1,5 +1,6 @@
 #ifndef OPTIONS_H
 #define OPTIONS_H OPTIONS_H
+#define MAXEXECLEN 256
 
 typedef struct {
 	int benchmark;
@@ -10,6 +11,8 @@
 	unsigned int num_lines;
 	unsigned int scrolloff;
 	const char *prompt;
+	char *exec;
+	char* p_exec;
 	unsigned int workers;
 	char input_delimiter;
 	int show_info;
--- src/tty.c	2021-07-30 02:51:15.260828984 +0300
+++ src/tty.c.patched	2021-08-01 14:59:54.903999407 +0300
@@ -61,6 +61,7 @@
 	 */
 	new_termios.c_iflag &= ~(ICRNL);
 	new_termios.c_lflag &= ~(ICANON | ECHO | ISIG);
+	new_termios.c_iflag |= INLCR;
 
 	if (tcsetattr(tty->fdin, TCSANOW, &new_termios))
 		perror("tcsetattr");
--- src/tty_interface.c	2021-07-30 02:25:34.298545352 +0300
+++ src/tty_interface.c.patched	2021-08-01 15:07:09.139405192 +0300
@@ -152,11 +152,13 @@
 static void action_emit(tty_interface_t *state) {
 	update_state(state);
 
-	/* Reset the tty as close as possible to the previous state */
-	clear(state);
+	const char *selection = choices_get(state->choices, state->choices->selection);
+	if ( state->options->exec == NULL ){
+		/* Reset the tty as close as possible to the previous state */
+		clear(state);
 
-	/* ttyout should be flushed before outputting on stdout */
-	tty_close(state->tty);
+		/* ttyout should be flushed before outputting on stdout */
+		tty_close(state->tty);
 
 	/* If no choices were selected with multi-select, use the choice under
 	 * the cursor */
@@ -166,8 +168,12 @@
 			/* output the result */
 			printf("%s\n", selection);
 		} else {
+			if (selection) {
+				strcpy(state->options->p_exec,selection);
+				system(state->options->exec);
+			}
 			/* No match, output the query instead */
-			printf("%s\n", state->search);
+			/* printf("%s\n", state->search); */
 		}
 	} else {
 	for (size_t i = 0; i < state->choices->selections.size; i++) {
